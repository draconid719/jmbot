# Generated by Django 3.0.5 on 2021-01-11 13:57

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Shout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('comment', models.TextField()),
                ('date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=50)),
                ('thread', models.CharField(max_length=100)),
                ('amount', models.FloatField(default=0.0)),
                ('cursus', models.TextField(choices=[('Paper', 'Paper'), ('Live', 'Live')], default='')),
                ('author', models.CharField(default='', max_length=50)),
                ('botname', models.CharField(default='', max_length=50)),
                ('starttime', models.DateTimeField(default=None)),
                ('clue', models.CharField(default='', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Name')),
                ('exchange', models.CharField(choices=[('binance', 'binance'), ('poloniex', 'poloniex'), ('bitz', 'bitz'), ('ftx', 'ftx'), ('kraken', 'kraken'), ('bittrex', 'bittrex'), ('kucoin', 'kucoin'), ('digifinex', 'digifinex'), ('bw', 'bw'), ('huobipro', 'huobipro')], default='binance', help_text='The cryptocurrency market being used', max_length=50, verbose_name='Exchange')),
                ('candle_size', models.CharField(choices=[('1m', '1m'), ('5m', '5m'), ('15m', '15m'), ('30m', '30m'), ('1h', '1h'), ('2h', '2h'), ('4h', '4h'), ('6h', '6h'), ('8h', '8h'), ('12h', '12h'), ('1d', '1d'), ('3d', '3d')], default='5m', help_text='The interval of time to consider as a single price data point', max_length=50, verbose_name='Candle Size')),
                ('strategy', models.CharField(choices=[('MACDgoldencross', 'MACDgoldencross'), ('RSIsignals', 'RSIsignals'), ('MAcrossover', 'MAcrossover'), ('MAgoldenCross', 'MAgoldenCross'), ('MACDandRSI', 'MACDandRSI'), ('RSIandMACross', 'RSIandMACross'), ('StochSignal', 'StochSignal'), ('Stochcrossover', 'Stochcrossover'), ('MACDandStoch', 'MACDandStoch'), ('StoCrossSignal', 'StoCrossSignal'), ('BollingerBand', 'BollingerBand')], default='MAgoldenCross', help_text='The algorithm to use for trading using the market indicators', max_length=100, verbose_name='Strategy')),
                ('indicator', models.TextField(help_text='The indicator parameter to use', null=True)),
                ('pair', models.CharField(choices=[('BTC/USDT', 'BTC-USDT'), ('ETH/USDT', 'ETH-USDT'), ('LINK/USDT', 'LINK-USDT'), ('XRP/USDT', 'XRP-USDT'), ('BCH/USDT', 'BCH-USDT'), ('XTZ/USDT', 'XTZ-USDT'), ('ETH/BTC', 'ETH-BTC'), ('LTC/USDT', 'LTC-USDT'), ('EOS/USDT', 'EOS-USDT'), ('DASH/USDT', 'DASH-USDT'), ('XLM/USDT', 'XLM-USDT'), ('SOL/BTC', 'SOL-BTC'), ('ZEC/USDT', 'ZEC-USDT'), ('XTZ/BTC', 'XTZ-BTC'), ('XMR/BTC', 'XMR-BTC'), ('TRX/USDT', 'TRX-USDT'), ('ADA/USDT', 'ADA-USDT'), ('XRP/BTC', 'XRP-BTC'), ('NEO/USDT', 'NEO-USDT'), ('LTC/BTC', 'LTC-BTC'), ('DASH/BTC', 'DASH-BTC'), ('EOS/BTC', 'EOS-BTC'), ('DATA/BTC', 'DATA-BTC'), ('ATOM/USDT', 'ATOM-USDT'), ('QTUM/USDT', 'QTUM-USDT'), ('ADA/BTC', 'ADA-BTC'), ('NAV/BTC', 'NAV-BTC'), ('ENJ/USDT', 'ENJ-USDT'), ('ALGO/USDT', 'ALGO-USDT'), ('IOTA/USDT', 'IOTA-USDT'), ('TRX/BTC', 'TRX-BTC'), ('LTO/BTC', 'LTO-BTC')], default='BTC/USDT', help_text='The cryptocurrency pair being used', max_length=50, verbose_name='Pair')),
                ('simultaneousTrades', models.IntegerField(default=1, help_text='The number of trades the bot is allowed to enter at the same time', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='SimultaneousTrades')),
                ('visible', models.CharField(choices=[('yes', 'yes'), ('no', 'no')], default='yes', help_text='Your bot will be visible by all user of this website', max_length=10, verbose_name='Visible')),
                ('history', models.TextField(default='[]')),
                ('current_profit', models.FloatField(default=0)),
                ('usdprofit', models.FloatField(default=0)),
                ('longhistory', models.TextField(default='[]')),
                ('orders', models.TextField(default='[]')),
                ('livestatus', models.TextField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Inactive', null=True)),
                ('botype', models.TextField(default='Trade', null=True)),
                ('copy', models.BooleanField(default=False)),
                ('root', models.CharField(default=None, max_length=60, null=True)),
                ('identification', models.IntegerField(null=True)),
                ('sec', models.IntegerField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ArbitrageBot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Name')),
                ('firstExchange', models.CharField(choices=[('binance', 'binance'), ('poloniex', 'poloniex'), ('huobipro', 'huobipro'), ('ftx', 'ftx'), ('kraken', 'kraken'), ('bittrex', 'bittrex')], default='binance', help_text='The first exchange from the exchange pair', max_length=50, verbose_name='First Exchange')),
                ('secondExchange', models.CharField(choices=[('binance', 'binance'), ('poloniex', 'poloniex'), ('huobipro', 'huobipro'), ('ftx', 'ftx'), ('kraken', 'kraken'), ('bittrex', 'bittrex')], default='poloniex', help_text='The second exchange from the exchange pair', max_length=50, verbose_name='Second Exchange')),
                ('spread', models.IntegerField(default=5, help_text='The gap between two different exchanges', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Spread')),
                ('pair', models.CharField(choices=[('BTC/USDT', 'BTC-USDT'), ('ETH/USDT', 'ETH-USDT')], default='BTC/USDT', help_text='The cryptocurrency pair being used', max_length=50, verbose_name='Pair')),
                ('botype', models.TextField(default='Arbitrage', null=True)),
                ('history', models.TextField(null=True)),
                ('livestatus', models.TextField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Inactive', null=True)),
                ('current_profit', models.FloatField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
